# Generated by Django 5.1.7 on 2025-03-26 05:14

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('essay', 'Essay'), ('mixed', 'Mixed'), ('practical', 'Practical')], default='mcq', max_length=20, verbose_name='Exam Type')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('active', 'Active'), ('finished', 'Finished')], default='draft', max_length=10, verbose_name='Status')),
                ('duration', models.PositiveIntegerField(blank=True, null=True, verbose_name='Duration (minutes)')),
                ('start_time', models.DateTimeField(verbose_name='Start Time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End Time')),
                ('max_score', models.PositiveIntegerField(default=100, verbose_name='Max Score')),
                ('calculated_total_score', models.PositiveIntegerField(blank=True, null=True, verbose_name='Calculated Total Score')),
                ('attempt_limit', models.PositiveIntegerField(default=1, help_text='0 for unlimited', verbose_name='Attempt Limit')),
                ('passing_score', models.PositiveIntegerField(blank=True, null=True, verbose_name='Passing Score')),
                ('is_published', models.BooleanField(default=False, verbose_name='Is Published')),
                ('is_timed', models.BooleanField(default=True, verbose_name='Is Timed')),
                ('randomize_questions', models.BooleanField(default=False, verbose_name='Randomize Questions')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=255, verbose_name='Tags')),
                ('instructions', models.TextField(blank=True, verbose_name='Instructions')),
            ],
            options={
                'verbose_name': 'Exam',
                'verbose_name_plural': 'Exams',
            },
        ),
        migrations.CreateModel(
            name='ExamGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Exam Group',
                'verbose_name_plural': 'Exam Groups',
            },
        ),
        migrations.CreateModel(
            name='ExamStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_score', models.FloatField(default=0, verbose_name='Average Score')),
                ('highest_score', models.FloatField(default=0, verbose_name='Highest Score')),
                ('lowest_score', models.FloatField(default=0, verbose_name='Lowest Score')),
                ('participants', models.PositiveIntegerField(default=0, verbose_name='Participants')),
                ('pass_rate', models.FloatField(default=0, verbose_name='Pass Rate (%)')),
            ],
            options={
                'verbose_name': 'Exam Statistics',
                'verbose_name_plural': 'Exam Statistics',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(verbose_name='Question Body')),
                ('correct_answer', models.TextField(blank=True, null=True, verbose_name='Correct Answer')),
                ('options', models.JSONField(blank=True, help_text="JSON format: [{'id': 1, 'text': 'Option A'}, ...]", null=True, verbose_name='Options')),
                ('type', models.CharField(choices=[('mcq', 'Multiple Choice'), ('essay', 'Essay'), ('true_false', 'True/False'), ('short_answer', 'Short Answer'), ('matching', 'Matching')], default='mcq', max_length=50, verbose_name='Type')),
                ('difficulty_level', models.PositiveSmallIntegerField(default=1, help_text='1-5 scale', verbose_name='Difficulty Level')),
                ('attachment', models.FileField(blank=True, null=True, upload_to='questions/%Y/%m/%d/', verbose_name='Attachment')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='QuestionScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveIntegerField(default=1, verbose_name='Score')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Question Score',
                'verbose_name_plural': 'Question Scores',
            },
        ),
        migrations.CreateModel(
            name='QuestionStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_answers', models.PositiveIntegerField(default=0, verbose_name='Correct Answers')),
                ('total_attempts', models.PositiveIntegerField(default=0, verbose_name='Total Attempts')),
                ('success_rate', models.FloatField(default=0, verbose_name='Success Rate (%)')),
            ],
            options={
                'verbose_name': 'Question Statistics',
                'verbose_name_plural': 'Question Statistics',
            },
        ),
        migrations.CreateModel(
            name='Subjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
                ('title', models.CharField(max_length=122, unique=True, verbose_name='Title')),
                ('description', models.TextField(max_length=500, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('submitted_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Submitted At')),
                ('finished_at', models.DateTimeField(blank=True, null=True, verbose_name='Finished At')),
                ('answers', models.JSONField(help_text='Format: {question_id: answer}', verbose_name='Answers')),
                ('score', models.FloatField(blank=True, null=True, verbose_name='Score')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('pending_evaluation', 'Pending Evaluation'), ('evaluated', 'Evaluated')], default='draft', max_length=20, verbose_name='Status')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Feedback')),
                ('attempt_number', models.PositiveIntegerField(default=1, verbose_name='Attempt Number')),
                ('file', models.FileField(blank=True, null=True, upload_to='submissions/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'docx', 'jpg'])], verbose_name='Submitted File')),
            ],
            options={
                'verbose_name': 'Submission',
                'verbose_name_plural': 'Submissions',
            },
        ),
    ]
